# -*- coding: utf-8 -*-
"""Linear Regression on study hours vs grades.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KYpKkH6Dz1uxGzm0lRvdOJwXJOZrCBy1
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load the dataset
data = pd.read_csv("/content/student_scores (1).csv")  # Replace with actual filename

# Checking for missing values
print(data.isnull().sum())

# Splitting data into features (X) and target variable (y)
X = data[['Study_Hours']]
y = data['Scores']

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Linear Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Get model parameters
print("Intercept:", model.intercept_)
print("Slope (Coefficient):", model.coef_[0])

# Make Predictions
y_pred = model.predict(X_test)

# Evaluate the Model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error: {mae}")
print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")
print(f"R-squared Score: {r2}")

# Scatter Plot with Regression Line
plt.figure(figsize=(8, 5))
plt.scatter(X, y, color='blue', label="Actual Data")
plt.plot(X, model.predict(X), color='red', label="Regression Line")
plt.xlabel("Study Hours")
plt.ylabel("Scores")
plt.title("Study Hours vs Exam Scores")
plt.legend()
plt.show()

# Heatmap of Correlation
plt.figure(figsize=(6, 4))
sns.heatmap(data.corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Load the dataset
data = pd.read_csv("/content/student_scores (1).csv")  # Replace with actual filename

# Checking for missing values
print(data.isnull().sum())

# Splitting data into features (X) and target variable (y)
X = data[['Study_Hours']]
y = data['Scores']

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Ridge Regression Model
ridge_model = Ridge(alpha=1.0)  # Alpha controls regularization strength
ridge_model.fit(X_train, y_train)

# Get model parameters
print("Intercept:", ridge_model.intercept_)
print("Slope (Coefficient):", ridge_model.coef_[0])

# Make Predictions
y_pred = ridge_model.predict(X_test)

# Evaluate the Model
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error: {mae}")
print(f"Mean Squared Error: {mse}")
print(f"Root Mean Squared Error: {rmse}")
print(f"R-squared Score: {r2}")

# Scatter Plot with Regression Line
plt.figure(figsize=(8, 5))
plt.scatter(X, y, color='blue', label="Actual Data")
plt.plot(X, ridge_model.predict(X), color='red', label="Ridge Regression Line")
plt.xlabel("Study Hours")
plt.ylabel("Scores")
plt.title("Study Hours vs Scores (Ridge Regression)")
plt.legend()
plt.show()

# Heatmap of Correlation
plt.figure(figsize=(6, 4))
sns.heatmap(data.corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()